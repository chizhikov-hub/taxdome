// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxDome.Infrastructure;

#nullable disable

namespace TaxDome.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250713090146_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("DocumentAppliedActions", b =>
                {
                    b.Property<Guid>("AppliedActionsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppliedToDocumentsId")
                        .HasColumnType("TEXT");

                    b.HasKey("AppliedActionsId", "AppliedToDocumentsId");

                    b.HasIndex("AppliedToDocumentsId");

                    b.ToTable("DocumentAppliedActions");
                });

            modelBuilder.Entity("DocumentAvailableActions", b =>
                {
                    b.Property<Guid>("AvailableActionsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AvailableForDocumentsId")
                        .HasColumnType("TEXT");

                    b.HasKey("AvailableActionsId", "AvailableForDocumentsId");

                    b.HasIndex("AvailableForDocumentsId");

                    b.ToTable("DocumentAvailableActions");
                });

            modelBuilder.Entity("TaxDome.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TaxDome.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ClientId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FolderId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientId1");

                    b.HasIndex("FolderId");

                    b.HasIndex("FolderId1");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("TaxDome.Domain.Entities.DocumentAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DocumentActions");
                });

            modelBuilder.Entity("TaxDome.Domain.Entities.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("DocumentAppliedActions", b =>
                {
                    b.HasOne("TaxDome.Domain.Entities.DocumentAction", null)
                        .WithMany()
                        .HasForeignKey("AppliedActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxDome.Domain.Entities.Document", null)
                        .WithMany()
                        .HasForeignKey("AppliedToDocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentAvailableActions", b =>
                {
                    b.HasOne("TaxDome.Domain.Entities.DocumentAction", null)
                        .WithMany()
                        .HasForeignKey("AvailableActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxDome.Domain.Entities.Document", null)
                        .WithMany()
                        .HasForeignKey("AvailableForDocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxDome.Domain.Entities.Document", b =>
                {
                    b.HasOne("TaxDome.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaxDome.Domain.Entities.Client", null)
                        .WithMany("Documents")
                        .HasForeignKey("ClientId1");

                    b.HasOne("TaxDome.Domain.Entities.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaxDome.Domain.Entities.Folder", null)
                        .WithMany("Documents")
                        .HasForeignKey("FolderId1");

                    b.Navigation("Client");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("TaxDome.Domain.Entities.Client", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("TaxDome.Domain.Entities.Folder", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
